import { useEffect } from 'react'
import { DicomService } from '../services/DicomService'
import useAnnotationStore from '../store/useAnnotationStore'

export const useDicomLoader = (dicomFile, elementRef, onPatientDataParsed) => {
  const { 
    image, 
    viewport, 
    setImage, 
    setViewport,
    setPatientData 
  } = useAnnotationStore()

  // Êõ¥Êñ∞Ë¶ñÁ™óË≥áË®ä
  const updateViewportFromCornerstone = () => {
    if (elementRef.current) {
      const cornerstoneViewport = DicomService.getCornerstoneViewport(elementRef.current)
      if (cornerstoneViewport) {
        console.log('üéØ Cornerstone viewport data:', cornerstoneViewport)
        setViewport(cornerstoneViewport)
      } else {
        console.log('üìä No viewport data available (no image loaded)')
      }
    }
  }

  // Âº∑Âà∂ÈáçÊñ∞Ë™øÊï¥ Cornerstone ‰ª•ÈÅ©ÊáâÂÆπÂô®
  const forceResize = () => {
    if (elementRef.current) {
      DicomService.forceResize(elementRef.current)
      setTimeout(updateViewportFromCornerstone, 100)
    }
  }

  // ÂàùÂßãÂåñ Cornerstone
  useEffect(() => {
    DicomService.initializeCornerstone()
  }, [])

  // Ë®≠ÁΩÆ Cornerstone ÂÖÉÁ¥†Âíå‰∫ã‰ª∂Áõ£ËÅΩ
  useEffect(() => {
    if (elementRef.current) {
      const element = elementRef.current

      // Âè™ÂïüÁî®ÂÖÉÁ¥†Ôºå‰∏çÈ°ØÁ§∫ÂΩ±ÂÉè
      try {
        DicomService.setupCornerstoneElement(element, null)
      } catch (error) {
        console.warn('Error setting up cornerstone element:', error)
      }
      
      // Áõ£ËÅΩÊâÄÊúâÁõ∏ÈóúÁöÑ Cornerstone ‰∫ã‰ª∂
      const onViewportChanged = () => {
        console.log('üîÑ Cornerstone viewport changed')
        updateViewportFromCornerstone()
      }
      
      element.addEventListener('cornerstoneimagerendered', onViewportChanged)
      element.addEventListener('cornerstonenewimage', onViewportChanged)
      element.addEventListener('cornerstoneviewportchanged', onViewportChanged)
      element.addEventListener('cornerstoneresize', onViewportChanged)
      
      // ‰ΩøÁî® ResizeObserver Áõ£ËÅΩÂÆπÂô®Â§ßÂ∞èËÆäÂåñ
      const resizeObserver = new ResizeObserver(() => {
        console.log('üìè Container resized, forcing Cornerstone resize')
        setTimeout(forceResize, 50)
      })
      
      if (element) {
        resizeObserver.observe(element)
        element._resizeObserver = resizeObserver
      }

      // Ê∏ÖÁêÜÂáΩÊï∏
      return () => {
        try {
          element.removeEventListener('cornerstoneimagerendered', onViewportChanged)
          element.removeEventListener('cornerstonenewimage', onViewportChanged)
          element.removeEventListener('cornerstoneviewportchanged', onViewportChanged)
          element.removeEventListener('cornerstoneresize', onViewportChanged)
          
          if (element._resizeObserver) {
            element._resizeObserver.disconnect()
          }
          
          DicomService.cleanupCornerstoneElement(element)
        } catch (error) {
          console.warn('Error cleaning up cornerstone:', error)
        }
      }
    }
  }, []) // Âè™Âú®ÁµÑ‰ª∂ÊéõËºâÊôÇÂü∑Ë°å‰∏ÄÊ¨°

  // ËôïÁêÜË¶ñÁ™óÂ§ßÂ∞èËÆäÂåñ
  useEffect(() => {
    const handleResize = () => {
      console.log('ü™ü Window resized')
      setTimeout(forceResize, 100)
    }
    
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  // ËºâÂÖ• DICOM Ê™îÊ°à
  useEffect(() => {
    if (dicomFile && elementRef.current) {
      loadDicomFile(dicomFile)
    }
  }, [dicomFile])

  const loadDicomFile = async (file) => {
    try {
      console.log('üîÑ Loading DICOM file...')
      
      // ‰ΩøÁî®ÊúçÂãôÂ±§ËºâÂÖ•Ê™îÊ°à
      const result = await DicomService.loadDicomFile(file)
      const { image: loadedImage, patientData } = result

      // Êõ¥Êñ∞ÁãÄÊÖã
      setPatientData(patientData)
      onPatientDataParsed?.(patientData)

      // Á¢∫‰øùÂÖÉÁ¥†Â∑≤ÂïüÁî®ÔºåÁÑ∂ÂæåÈ°ØÁ§∫ÂΩ±ÂÉè
      if (elementRef.current) {
        await DicomService.setupCornerstoneElement(elementRef.current, loadedImage)
        
        // Á¢∫‰øùÂΩ±ÂÉèÈÅ©ÊáâÂÆπÂô®‰∏¶Â±Ö‰∏≠
        setTimeout(() => {
          DicomService.forceResize(elementRef.current)
          updateViewportFromCornerstone()
          console.log('‚úÖ Image loaded, fitted to window, and viewport updated')
        }, 200)

        setImage(loadedImage)
      }
    } catch (error) {
      console.error('‚ùå Error loading DICOM file:', error)
      alert(`Error loading DICOM file: ${error.message}`)
    }
  }

  return { image, viewport }
}